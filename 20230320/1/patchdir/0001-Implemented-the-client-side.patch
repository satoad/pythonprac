From 0e5fa12913c75f6069f096595a97e4aa890d0419 Mon Sep 17 00:00:00 2001
From: satoad <vsagalev@gmail.com>
Date: Fri, 17 Mar 2023 23:15:32 +0300
Subject: [PATCH 1/4] Implemented the client side

---
 20230313/1/prog.py | 135 +++++++++++++++------------------------------
 1 file changed, 45 insertions(+), 90 deletions(-)

diff --git a/20230313/1/prog.py b/20230313/1/prog.py
index d9d70a6..0c5c817 100644
--- a/20230313/1/prog.py
+++ b/20230313/1/prog.py
@@ -1,7 +1,9 @@
-from cowsay import cowsay, list_cows, read_dot_cow
+import sys
+import cmd
+import socket
 import shlex
 from io import StringIO
-import cmd
+from cowsay import cowsay, list_cows, read_dot_cow
 
 bat = read_dot_cow(StringIO("""
 $the_cow = <<EOC;
@@ -20,119 +22,67 @@ EOC
 """))
 
 
-class Dungeon:
-    def __init__(self, hero):
-        self.dungeon = [[None for i in range(10)] for j in range(10)]
-        self.hero = hero
-
-    def add_mob(self, mob):
-        if self.dungeon[mob.pos[0]][mob.pos[1]] is None:
-            self.dungeon[mob.pos[0]][mob.pos[1]] = mob
-            print(f'Added monster {mob.name} to ({mob.pos[0]}, {mob.pos[1]}) saying {mob.phrase}')
-        else:
-            self.dungeon[mob.pos[0]][mob.pos[1]] = mob
-            print(f'Added monster {mob.name} to ({mob.pos[0]}, {mob.pos[1]}) saying {mob.phrase}')
-            print('Replaced the old monster')
+def send_recv_serv(msg):
+    s.send((msg + '\n').encode())
+    ans = s.recv(1024).decode().strip().replace("'", "")
 
-    def encounter(self, x, y):
-        if self.dungeon[x][y].name == "jgsbat":
-            print(cowsay(self.dungeon[x][y].phrase, cowfile=bat))
+    if len(ans.split("\n")) == 3:
+        ans = ans.split("\n")
+        print(ans[0])
+        if ans[1] == "jgsbat":
+            print(cowsay(ans[1], cowfile=bat))
         else:
-            print(cowsay(self.dungeon[x][y].phrase, cow=self.dungeon[x][y].name))
-
-    def change_hero_pos(self, pos):
-        self.hero.pos[0] = (self.hero.pos[0] + pos[0]) % 10
-        self.hero.pos[1] = (self.hero.pos[1] + pos[1]) % 10
-        print(f'Moved to ({self.hero.pos[0]}, {self.hero.pos[1]})')
-        if self.dungeon[self.hero.pos[0]][self.hero.pos[1]] is not None:
-            self.encounter(self.hero.pos[0], self.hero.pos[1])
-
-    def attack(self, pos, name, weapon=None):
-        if isinstance(self.dungeon[pos[0]][pos[1]], Monster):
-            if weapon is None:
-                weapon = "sword"
-
-            mob = self.dungeon[pos[0]][pos[1]]
-
-            if name == mob.name:
-                dmg = self.hero.weapons[weapon]
-                if mob.hp < dmg:
-                    dmg = mob.hp
-
-                mob.hp -= dmg
-
-                print(f"Attacked {mob.name}, damage {dmg} hp")
-
-                if mob.hp == 0:
-                    print(f"{mob.name} died")
-                    self.dungeon[pos[0]][pos[1]] = None
-                else:
-                    self.dungeon[pos[0]][pos[1]].hp = mob.hp
-                    print(f"{mob.name} now has {mob.hp}")
-            else:
-                print(f"No {name} here")
-        else:
-            print("No monster here")
-
-
-class Hero:
-    def __init__(self, pos=None):
-        if pos is None:
-            pos = [0, 0]
-        self.pos = pos
-        self.weapons = {"sword": 10, "spear": 15, "axe": 20}
-
-
-class Monster:
-    def __init__(self, name, pos, phrase, hp, dungeon):
-        self.name = name
-        self.pos = pos
-        self.phrase = phrase
-        self.hp = hp
-        dungeon.add_mob(self)
+            print(cowsay(ans[1], cow=ans[2]))
+    else:
+        print(ans)
+    return
 
 
 class Game(cmd.Cmd):
-    intro = "<<< Welcome to Python-MUD 0.1 >>>"
-    prompt = ''
-    player = Hero()
-    dungeon = Dungeon(player)
+    def __init__(self, prompt=''):
+        super().__init__()
+        self.prompt = prompt
+        self.use_rawinput = False
 
     def do_up(self, args):
-        self.dungeon.change_hero_pos((0, -1))
+        send_recv_serv("up")
 
     def do_down(self, args):
-        self.dungeon.change_hero_pos((0, 1))
+        send_recv_serv("down")
 
     def do_left(self, args):
-        self.dungeon.change_hero_pos((-1, 0))
+        send_recv_serv("left")
 
     def do_right(self, args):
-        self.dungeon.change_hero_pos((1, 0))
+        send_recv_serv("right")
 
-    def do_addmon(self, inp):
-        inp = shlex.split(inp)
+    def do_addmon(self, args):
+        inp = shlex.split(args)
         if len(inp) == 8:
             if inp[0] in list_cows() or inp[0] == "jgsbat":
-                Monster(inp[0], [int(inp[inp.index("coords") + 1]), int(inp[inp.index("coords") + 2])],
-                        inp[inp.index("hello") + 1], int(inp[inp.index("hp") + 1]), self.dungeon)
+                msg = "addmon " + args
+                send_recv_serv(msg)
             else:
                 print("Cannot add unknown monster")
         else:
             print("Invalid arguments")
 
     def do_attack(self, args):
-        args = shlex.split(args)
-        if len(args) == 3:
-            if args[1] == "with":
-                if args[2] in self.player.weapons.keys():
-                    self.dungeon.attack(self.player.pos, args[0], args[2])
+        weapons = {"sword": 10, "spear": 15, "axe": 20}
+
+        inp = shlex.split(args)
+        if len(inp) == 3:
+            if inp[1] == "with":
+                if inp[2] in weapons:
+                    msg = "attack " + inp[0] + " " + str(weapons[inp[2]])
+                    send_recv_serv(msg)
                 else:
                     print("Unknown weapon")
             else:
                 print("Invalid arguments")
-        elif len(args) == 1:
-            self.dungeon.attack(self.player.pos, args[0])
+        elif len(inp) == 1:
+            msg = ' '.join(["attack", inp[0], str(weapons["sword"])])
+            send_recv_serv(msg)
         else:
             print("Invalid arguments")
 
@@ -170,8 +120,13 @@ class Game(cmd.Cmd):
 
 
 def game():
+    print(s.recv(1024).decode().strip())
     Game().cmdloop()
 
 
 if __name__ == "__main__":
-    game()
+    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
+        s.connect((sys.argv[1], int(sys.argv[2]) if len(sys.argv) > 2 else 1337))
+        s.send("Connect\n".encode())
+        game()
+
-- 
2.39.2

